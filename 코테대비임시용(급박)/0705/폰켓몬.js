/**
 * 문제 설명
 * 연구실에 있는 N마리의 폰켓몬 중 N/2마리를 선택할 수 있을 때,
 * 가장 다양한 종류의 폰켓몬을 선택할 수 있는 경우의 수(종류 개수)를 반환하는 문제입니다.
 *
 * nums 배열: 폰켓몬의 종류 번호가 담긴 배열 (중복 허용)
 * 목표: N/2마리만 선택할 수 있을 때, 최대한 다양한 종류를 선택하는 것
 *
 * 제한 사항
 * - nums.length는 항상 짝수
 * - nums.length: 1 ~ 10,000
 * - 폰켓몬 번호: 1 ~ 200,000 (정수)
 *
 * 예시
 * [3,1,2,3] → 2종류 선택 가능 (3,1) or (3,2)
 * [3,3,3,2,2,4] → 3종류 선택 가능 (3,2,4 중에서 3개 선택)
 * [3,3,3,2,2,2] → 최대 2종류 (3,2)
 */

function solution(nums) {
  // Set을 이용해 중복 제거한 후의 폰켓몬 종류 수 계산
  const count = new Set(nums).size;

  // 선택할 수 있는 최대 수는 N/2 (문제에서 정해짐)
  const pick = nums.length / 2;

  // 선택 가능한 종류 수는 count와 pick 중 작은 값
  return Math.min(count, pick);
}

/**
 * 헷갈렸던 부분 정리
 *
 * 1. new Set(nums).size란?
 *    - Set은 중복을 허용하지 않음 → 중복된 번호가 제거된 집합이 생성됨
 *    - .size는 그 집합에 포함된 서로 다른 번호의 개수를 의미함
 *    - 예: new Set([3,1,2,3]) → Set {3,1,2} → size는 3
 *
 * 2. 왜 Math.min(count, pick)을 쓰는가?
 *    - 아무리 종류가 많아도 골라야 할 수는 nums.length/2이기 때문에
 *    - 예: 종류가 5개여도 최대 3마리만 고를 수 있다면 3종류만 가능
 *    - 반대로, 6마리를 고를 수 있지만 종류가 3개뿐이면 최대 3종류만 가능
 */
