// 문자열 s는 하나 이상의 단어로 구성되어 있고, 단어는 하나 이상의 공백 문자로 구분되어 있음
// 각 단어의 짝수 번째 인덱스 문자는 대문자, 홀수 번째 인덱스 문자는 소문자로 변환해야 함
// 단, 전체 문자열 인덱스 기준이 아니라 "단어별"로 인덱스를 따져야 함

function solution(s) {
  return s
    .split(" ") // 공백을 기준으로 단어 배열로 나눔
    .map(word =>
      word
      .split("") // 단어를 문자 배열로 나눔
      .map((char, idx) =>
        idx % 2 === 0 ? char.toUpperCase() : char.toLowerCase() // 인덱스 기준 변환
      )
      .join("") // 다시 하나의 문자열로 조합
    )
    .join(" "); // 단어들을 공백으로 이어붙임
}

/*
[주요 메서드 설명 정리]

// split(" ")
문자열을 공백 기준으로 나눠 배열로 반환

// map(callback)
배열의 각 요소를 변환하여 새로운 배열을 생성

// toUpperCase(), toLowerCase()
문자를 대문자 또는 소문자로 변환

// join("")
배열을 하나의 문자열로 합침. ""이면 사이에 아무 문자도 넣지 않음

[주의할 점]
- 단어별로 인덱스를 0부터 다시 시작해야 하므로, 전체 문자열 인덱스를 사용하면 안 됨
- split(" ")은 연속된 공백도 잘 처리되므로 그대로 사용해도 무방함
*/
